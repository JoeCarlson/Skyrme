#=
Skyrme.ij A notebook of the necessary calculations for the radially
anisotropic dialation mode of the semiclassical chiral soliton
=#

println("Starting...")
using DifferentialEquations, Plots, Roots, QuadGK, Dierckx

# Basic parameters
if length(ARGS) > 0
  m_pi = parse(Float64,ARGS[1])
else
  m_pi = 138.
end
F_pi = 186.

println("m_pi is ",m_pi)
# lower/upper limit of evaluation/integration
lowerLimit = 1.e-20
upperLimit = 10.

# The differential equation for the radial profile
function skyrmeProfile(du,u,mass,r)
  du[1] = u[2]
  if r < 1.e-4
    du[2] = 0.
  else 
    du[2] = ((-2*r*u[2] -
             4*sin(2*u[1])*u[2]^2 +
             sin(2*u[1]) +
             8*cos(u[1])*sin(u[1])^3/(r^2) +
             (mass)^2*r^2*sin(u[1]))
                   /
             (r^2 + 8*sin(u[1])^2))
  end
end

# A function for determining the boundary conditions.
# We'll shoot with an initial derivative e and look for
# a solution that vanishes
function shoot(initialDeriv)
       prob = ODEProblem(skyrmeProfile,[Float64(pi),initialDeriv],(lowerLimit,upperLimit),(m_pi/F_pi))
       sol = solve(prob,Tsit5(),reltol=1e-16,abstol=1e-16)
       getindex.(sol.u,1)[length(sol.t)]
end

# finding the initial derivative
up0 = find_zero(shoot,(-10,0.))

println("Initial first derivative ",up0)

solution = solve(ODEProblem(skyrmeProfile,
                            [big(float(pi)),up0],
                            (lowerLimit,upperLimit),
                            (m_pi/F_pi)),
                 Tsit5(),reltol=1e-16,abstol=1e-16)

println("Solution has ",length(solution.t)," radial points.")

# The solution data points
r = solution.t
F0 = getindex.(solution.u,1)
F1 = getindex.(solution.u,2)

# Spline-based functions based on these data points
radius = Spline1D(r,r)
profile = Spline1D(r,F0)
profilePrime = Spline1D(r,F1)

Num = (-2 .*r .*F1 .-4 .*sin.(2 .*F0).*F1.^2 .+sin.(2 .*F0).+8 .*sin.(F0).^3 .*cos.(F0)./(r.^2))
Den = (r.^2 .+ 8 .*sin.(F0).^2)
F2 = ((-2. .* r .* F1 .-
       4. .* sin.(2 .*F0) .* F1.^2. .+
       sin.(2. .*F0) .+
       8. .* sin.(F0) .^ 3. .* cos.(F0) ./ r .^2. .+
       (m_pi/F_pi)^2 .* r .^2 .*sin.(F0))
       ./
       (r .^2. .+ 8. .* sin.(F0) .^ 2.))

# should be equal to \pi
integral, err = quadgk(x -> profilePrime(x),lowerLimit,upperLimit,rtol=1e-8)
println("Integral of F' (should be pi): ",integral," with error ",err)

# I_1
integral, err = quadgk(x -> (2*pi/9)*x^4*profilePrime(x)^2,lowerLimit,upperLimit,rtol=1e-8)
println("I_1: ",integral," with error ",err)
plot(r,(2*pi/9) .* r .^4 .*profilePrime.(r) .^2)
savefig("I1.svg")

# I_2
integral, err = quadgk(x -> (4*pi/3)*x^2*sin(profile(x))^2,lowerLimit,upperLimit,rtol=1e-8)
println("I_2: ",integral," with error ",err)
plot(r,(4*pi/3) .* r .^2 .* sin.(profile.(r)) .^2)
savefig("I2.svg")

# I_3
integral, err = quadgk(x -> (pi/2)*(x^2*profilePrime(x)^2 + 2*sin(profile(x))^2),lowerLimit,upperLimit,rtol=1e-8)
println("I_3: ",integral," with error ",err)
plot(r,(pi/2) .* ( r .^2 .*profilePrime.(r) .^2 .+ sin.(profile.(r)) .^2))
savefig("I3.svg")

# I_4
integral, err = quadgk(x -> (m_pi/F_pi)^2*pi*x^2*(1-cos(profile(x))),lowerLimit,upperLimit,rtol=1e-8)
println("I_4: ",integral," with error ",err)
plot(r,(m_pi/F_pi)^2*pi .* r .^2 .*(1. .- cos.(profile.(r))))
savefig("I4.svg")


